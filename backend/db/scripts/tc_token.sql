--  CREATE TABLE
CREATE TABLE TC_TOKEN
(
    ID INT AUTO_INCREMENT COMMENT 'IDENTIFICADOR UNICO CONSECUTIVO DEL TOKEN DE LA PAGINA',
    TOKEN VARCHAR(120) NOT NULL COMMENT 'TOKEN', 
    PAGINA VARCHAR(255) NOT NULL COMMENT 'PAGINA DE DONDE SE OBTIENE EL TOKEN', 
    IP_PUBLICA    VARCHAR(750) NOT NULL COMMENT 'IP PUBLICA DEL USUARIO QUE MANDA HACER LA PETICIÓN',
    IP_INTERNA    VARCHAR(750) NOT NULL COMMENT 'IP INTERNA DEL USUARIO QUE MANDA HACER LA PETICIÓN',
    ESTATUS INT DEFAULT 1 COMMENT 'ESTADOS DEL ROL 0: USADO, 1: ACTIVO',
    UM VARCHAR(20) NOT NULL COMMENT 'USUARIO QUE REALIZO EL ÚLTIMO MOVIMIENTO',
    FM TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT 'FECHA EN QUE SE REALIZO EL ULTIMO MOVIMIENTO',
    PRIMARY KEY (ID)
) 
COMMENT = 'CATALOGO DE TOKEN DEL SISTEMA LIBRARY COMMUNITY';
--  CREATE UNIQUE INDEX
CREATE UNIQUE INDEX PK_TOKE_ID ON TC_TOKEN (ID);
CREATE UNIQUE INDEX UK_TOKE_TOKEN ON TC_TOKEN (TOKEN);
--  CREATE BITACORA
CREATE TABLE TB_TOKEN
(
    ID INT COMMENT 'IDENTIFICADOR UNICO CONSECUTIVO DE LOS TOKEN', 
    TOKEN VARCHAR(120) COMMENT 'TOKEN', 
    PAGINA VARCHAR(255) COMMENT 'PAGINA DE DONDE SE OBTIENE EL TOKEN', 
    IP_PUBLICA    VARCHAR(750) COMMENT 'IP PUBLICA DEL USUARIO QUE MANDA HACER LA PETICIÓN',
    IP_INTERNA    VARCHAR(750) COMMENT 'IP INTERNA DEL USUARIO QUE MANDA HACER LA PETICIÓN',
    ESTATUS INT COMMENT 'ESTADOS DEL ROL 0: USADO, 1: ACTIVO',
    UM VARCHAR(20) COMMENT 'USUARIO QUE REALIZO EL ÚLTIMO MOVIMIENTO',
    FM TIMESTAMP COMMENT 'FECHA EN QUE SE REALIZO EL ULTIMO MOVIMIENTO',
    TIPO_CAMBIO VARCHAR(40) COMMENT 'MOVIMIENTO QUE SE HIZO'
) 
COMMENT = 'BITACORA DE LOS TOKEN';

DELIMITER //

CREATE TRIGGER TGR_B_TOKE_INSERT BEFORE INSERT ON TC_TOKEN
FOR EACH ROW
BEGIN
    DECLARE V_TIPO_CAMBIO VARCHAR(6);
    IF NEW.ID IS NOT NULL THEN
        SET V_TIPO_CAMBIO = 'INSERT';
    END IF;
    INSERT INTO TB_TOKEN
        (ID, TOKEN, PAGINA, IP_PUBLICA, IP_INTERNA,ESTATUS, UM, FM, TIPO_CAMBIO)
    VALUES
        (
            NEW.ID,
            NEW.TOKEN,
            NEW.PAGINA,
            NEW.IP_PUBLICA,
            NEW.IP_INTERNA,
            NEW.ESTATUS,
            NEW.UM,
            NEW.FM,
            V_TIPO_CAMBIO
        );
END;
//

CREATE TRIGGER TGR_B_TOKE_UPDATE BEFORE UPDATE ON TC_TOKEN
FOR EACH ROW
BEGIN
    DECLARE V_TIPO_CAMBIO VARCHAR(6);
    IF NEW.ID IS NOT NULL THEN
        IF NEW.ESTATUS <=> OLD.ESTATUS THEN
            SET V_TIPO_CAMBIO = 'UPDATE';
        END IF;
    END IF;

    INSERT INTO TB_TOKEN
        (ID, TOKEN, PAGINA, IP_PUBLICA,IP_INTERNA,ESTATUS, UM, FM, TIPO_CAMBIO)
    VALUES
        (
            NEW.ID,
            NEW.TOKEN,
            NEW.PAGINA,
            NEW.IP_PUBLICA,
            NEW.IP_INTERNA,
            NEW.ESTATUS,
            NEW.UM,
            NEW.FM,
            V_TIPO_CAMBIO
        );
END;
//
CREATE TRIGGER TGR_B_TOKE_DELETE BEFORE DELETE ON TC_TOKEN
FOR EACH ROW
BEGIN
    DECLARE V_TIPO_CAMBIO VARCHAR(6);
    SET V_TIPO_CAMBIO = 'DELETE';
    INSERT INTO TB_TOKEN
        (ID, TOKEN, PAGINA,IP_PUBLICA,IP_INTERNA,ESTATUS, UM, FM, TIPO_CAMBIO)
    VALUES
        (
            OLD.ID,
            OLD.TOKEN,
            OLD.PAGINA,
            OLD.IP_PUBLICA,
            OLD.IP_INTERNA,
            OLD.ESTATUS,
            OLD.UM,
            OLD.FM,
            V_TIPO_CAMBIO
        );
END;
//
DELIMITER ;
